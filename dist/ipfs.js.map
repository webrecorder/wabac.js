{"version":3,"file":"ipfs.js","sourceRoot":"","sources":["../src/ipfs.ts"],"names":[],"mappings":"AAAA,8EAA8E;AAC9E,gCAAgC;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEtC,SAAS;AACT,8DAA8D;AAC9D,IAAI,WAAW,GAAQ,IAAI,CAAC;AAE5B,SAAS;AACT,8DAA8D;AAC9D,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,IAAyB;IAC1D,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,WAAW,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,WAWN,CAAC;AACJ,CAAC","sourcesContent":["// ===========================================================================\n// @ts-expect-error no type info\nimport { create } from \"auto-js-ipfs\";\n\n// [TODO]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet autoipfsAPI: any = null;\n\n// [TODO]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport async function initAutoIPFS(opts: Record<string, any>) {\n  if (!autoipfsAPI) {\n    autoipfsAPI = await create(opts);\n  }\n\n  return autoipfsAPI as {\n    get: (\n      url: string,\n      opts: {\n        start?: number;\n        offset?: number;\n        end?: number;\n        signal?: AbortSignal | null;\n      },\n    ) => AsyncIterable<Uint8Array>;\n    getSize: (url: string) => number | null;\n  };\n}\n"]}