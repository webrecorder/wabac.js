{"version":3,"file":"rewriteVideo.js","sourceRoot":"","sources":["../../src/rewrite/rewriteVideo.ts"],"names":[],"mappings":"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","sourcesContent":["import { XMLParser, XMLBuilder } from \"fast-xml-parser\";\nimport { type ArchiveResponse } from \"../response\";\n\n// orig pywb defaults\nconst OLD_DEFAULT_MAX_BAND = 2000000;\nconst OLD_DEFAULT_MAX_RES = 1280 * 720;\n\n// lower defaults\nconst DEFAULT_MAX_BAND = 1000000;\nconst DEFAULT_MAX_RES = 860 * 480;\n\n// ===========================================================================\n// [TODO]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMaxResAndBand(opts: Record<string, any> = {}) {\n  // read opts from warc, if any\n  let maxRes, maxBand;\n\n  // @ts-expect-error [TODO] - TS4111 - Property 'response' comes from an index signature, so it must be accessed with ['response'].\n  const response = opts.response as ArchiveResponse | null;\n  const extraOpts = response?.extraOpts;\n\n  if (extraOpts) {\n    maxRes = extraOpts.adaptive_max_resolution || extraOpts.maxRes;\n    maxBand = extraOpts.adaptive_max_bandwidth || extraOpts.maxBand;\n    if (maxRes && maxBand) {\n      return { maxRes, maxBand };\n    }\n  }\n\n  // @ts-expect-error [TODO] - TS4111 - Property 'response' comes from an index signature, so it must be accessed with ['response']. | TS4111 - Property 'response' comes from an index signature, so it must be accessed with ['response'].\n  const isReplay = opts.response && !opts.response.isLive;\n  let res;\n\n  // if not replay, or unknown, use new lower setting\n  if (!isReplay) {\n    res = { maxRes: DEFAULT_MAX_RES, maxBand: DEFAULT_MAX_BAND };\n  } else {\n    // use existing pywb defaults\n    res = { maxRes: OLD_DEFAULT_MAX_RES, maxBand: OLD_DEFAULT_MAX_BAND };\n  }\n\n  // @ts-expect-error [TODO] - TS4111 - Property 'save' comes from an index signature, so it must be accessed with ['save'].\n  if (opts.save) {\n    // @ts-expect-error [TODO] - TS4111 - Property 'save' comes from an index signature, so it must be accessed with ['save'].\n    opts.save.maxRes = res.maxRes;\n    // @ts-expect-error [TODO] - TS4111 - Property 'save' comes from an index signature, so it must be accessed with ['save'].\n    opts.save.maxBand = res.maxBand;\n  }\n\n  return res;\n}\n\n// ===========================================================================\n//HLS\n// [TODO]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function rewriteHLS(text: string, opts: Record<string, any>) {\n  const EXT_INF = /#EXT-X-STREAM-INF:(?:.*[,])?BANDWIDTH=([\\d]+)/;\n  const EXT_RESOLUTION = /RESOLUTION=([\\d]+)x([\\d]+)/;\n\n  const { maxRes, maxBand } = getMaxResAndBand(opts);\n\n  const indexes: number[] = [];\n  let count = 0;\n  let bestIndex: number | null = null;\n\n  let bestBand = 0;\n  let bestRes = 0;\n\n  const lines = text.trimEnd().split(\"\\n\");\n\n  for (const line of lines) {\n    const m = line.match(EXT_INF);\n    if (!m) {\n      // if has rewriteUrl (not-ajax), then rewrite HLS urls\n      // @ts-expect-error [TODO] - TS4111 - Property 'rewriteUrl' comes from an index signature, so it must be accessed with ['rewriteUrl'].\n      if (opts.rewriteUrl && !line.startsWith(\"#\")) {\n        // @ts-expect-error [TODO] - TS4111 - Property 'rewriteUrl' comes from an index signature, so it must be accessed with ['rewriteUrl'].\n        lines[count] = opts.rewriteUrl(line);\n      }\n      count += 1;\n      continue;\n    }\n\n    indexes.push(count);\n\n    const currBand = Number(m[1]);\n\n    const m2 = line.match(EXT_RESOLUTION);\n    const currRes = m2 ? Number(m2[1]) * Number(m2[2]) : 0;\n\n    if (currRes && maxRes) {\n      if (currRes <= maxRes && currRes > bestRes) {\n        bestRes = currRes;\n        bestBand = currBand;\n        bestIndex = count;\n      }\n    } else if (currBand <= maxBand && currBand > bestBand) {\n      bestRes = currRes;\n      bestBand = currBand;\n      bestIndex = count;\n    }\n\n    count += 1;\n  }\n\n  indexes.reverse();\n\n  for (const inx of indexes) {\n    if (inx !== bestIndex) {\n      lines.splice(inx, 2);\n    }\n  }\n\n  return lines.join(\"\\n\");\n}\n\n// ===========================================================================\n// DASH\nexport const xmlOpts = {\n  ignoreAttributes: false,\n  removeNSPrefix: false,\n  format: false,\n  suppressEmptyNode: true,\n  suppressBooleanAttributes: false,\n};\n\nexport function rewriteDASH(\n  text: string,\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts: Record<string, any>,\n  bestIds?: string[],\n) {\n  try {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return _rewriteDASH(text, opts, bestIds);\n  } catch (e) {\n    console.log(e);\n    return text;\n  }\n}\n\nfunction _rewriteDASH(\n  text: string,\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts: Record<string, any>,\n  bestIds?: string[],\n) {\n  const parser = new XMLParser(xmlOpts);\n  const root = parser.parse(text);\n\n  const { maxRes, maxBand } = getMaxResAndBand(opts);\n\n  let best = null;\n  let bestRes = 0;\n  let bestBand = 0;\n\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let adaptSets: any[];\n\n  if (!Array.isArray(root.MPD.Period.AdaptationSet)) {\n    adaptSets = [root.MPD.Period.AdaptationSet];\n  } else {\n    adaptSets = root.MPD.Period.AdaptationSet;\n  }\n\n  for (const adaptset of adaptSets) {\n    best = null;\n    bestRes = 0;\n    bestBand = 0;\n\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let reps: any[];\n\n    if (!Array.isArray(adaptset.Representation)) {\n      reps = [adaptset.Representation];\n    } else {\n      reps = adaptset.Representation;\n    }\n\n    for (const repres of reps) {\n      const currRes =\n        Number(repres[\"@_width\"] || \"0\") * Number(repres[\"@_height\"] || \"0\");\n      const currBand = Number(repres[\"@_bandwidth\"] || \"0\");\n\n      if (currRes && maxRes && currRes <= maxRes) {\n        if (currRes > bestRes) {\n          bestRes = currRes;\n          bestBand = currBand;\n          best = repres;\n        }\n      } else if (currBand <= maxBand && currBand > bestBand) {\n        bestRes = currRes;\n        bestBand = currBand;\n        best = repres;\n      }\n    }\n\n    if (best && Array.isArray(bestIds)) {\n      // [TODO]\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      bestIds.push(best[\"@_id\"]);\n    }\n\n    if (best) {\n      adaptset.Representation = [best];\n    }\n  }\n\n  const toXML = new XMLBuilder(xmlOpts);\n  const xml = toXML.build(root);\n\n  const xmlOutput = xml.trim();\n  if (!xmlOutput.slice(0, 5).toLowerCase().startsWith(\"<?xml\")) {\n    return \"<?xml version='1.0' encoding='UTF-8'?>\\n\" + xmlOutput;\n  } else {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return xmlOutput;\n  }\n}\n"]}