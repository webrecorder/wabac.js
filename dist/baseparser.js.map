{"version":3,"file":"baseparser.js","sourceRoot":"","sources":["../src/baseparser.ts"],"names":[],"mappings":"AAQA,MAAM,kBAAkB,GAAG,IAAI,CAAC;AA2BhC,8EAA8E;AAC9E,MAAe,UAAU;IACvB,SAAS,CAAS;IAClB,QAAQ,GAAoB,EAAE,CAAC;IAC/B,KAAK,GAAoB,EAAE,CAAC;IAC5B,KAAK,GAAG,CAAC,CAAC;IACV,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;IAC5B,MAAM;IACN,SAAS;IACT,8DAA8D;IAC9D,EAAE,CAAM;IAER,YAAY,SAAS,GAAG,kBAAkB;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,IAAe;QACrB,SAAS;QACT,iEAAiE;QACjE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;IAC7C,CAAC;IAED,WAAW,CAAC,GAAkB;QAC5B,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;QAED,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YACzB,OAAO,CAAC,IAAI,CAAC,6CAA6C,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YACtE,OAAO;QACT,CAAC;QAED,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;QAEnC,IAAI,GAAG,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YAChC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1B,OAAO,CAAC,IAAI,CACV,4DAA4D,CAC7D,CAAC;gBACF,OAAO;YACT,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,KAAK;QACH,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,SAAS;YACT,iEAAiE;YACjE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACjE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAI,CAAC;YACH,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,WAAW,KAAI,CAAC;CASjB;AAED,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import {\n  type CollMetadata,\n  type ArchiveLoader,\n  type DBStore,\n  type PageEntry,\n  type ExtraOpts,\n} from \"./types\";\n\nconst DEFAULT_BATCH_SIZE = 1000;\n\nexport type ResourceEntry = {\n  url: string;\n  ts: number;\n\n  digest?: string | null;\n  status?: number;\n  mime?: string;\n\n  respHeaders?: Record<string, string> | null;\n  reqHeaders?: Record<string, string> | null;\n  recordDigest?: string | null;\n  payload?: Uint8Array | null;\n  reader?: AsyncIterable<Uint8Array> | Iterable<Uint8Array> | null;\n  referrer?: string | null;\n  extraOpts?: ExtraOpts | null;\n  pageId?: string | null;\n  origURL?: string | null;\n  origTS?: number | null;\n  source?: object;\n  requestUrl?: string | null;\n  method?: string | null;\n  requestBody?: Uint8Array;\n  loaded?: boolean;\n};\n\n// ===========================================================================\nabstract class BaseParser implements ArchiveLoader {\n  batchSize: number;\n  promises: Promise<void>[] = [];\n  batch: ResourceEntry[] = [];\n  count = 0;\n  dupeSet = new Set<string>();\n  //TODO\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  db: any;\n\n  constructor(batchSize = DEFAULT_BATCH_SIZE) {\n    this.batchSize = batchSize;\n  }\n\n  addPage(page: PageEntry) {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.promises.push(this.db.addPage(page));\n  }\n\n  isBatchFull() {\n    return this.batch.length >= this.batchSize;\n  }\n\n  addResource(res: ResourceEntry) {\n    if (this.isBatchFull()) {\n      this.flush();\n    }\n\n    if (Number.isNaN(res.ts)) {\n      console.warn(\"Skipping resource with missing/invalid ts: \" + res.url);\n      return;\n    }\n\n    const key = res.url + \" \" + res.ts;\n\n    if (res.mime === \"warc/revisit\") {\n      if (this.dupeSet.has(key)) {\n        console.warn(\n          \"Skipping duplicate revisit, prevent overriding non-revisit\",\n        );\n        return;\n      }\n    } else {\n      this.dupeSet.add(key);\n    }\n\n    this.batch.push(res);\n  }\n\n  flush() {\n    if (this.batch.length > 0) {\n      // [TODO]\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.promises.push(this.db.addResources(this.batch));\n    }\n    console.log(`Read ${(this.count += this.batch.length)} records`);\n    this.batch = [];\n  }\n\n  async finishIndexing() {\n    this.flush();\n\n    this._finishLoad();\n\n    try {\n      await Promise.all(this.promises);\n    } catch (e) {\n      console.warn(e);\n    }\n\n    this.promises = [];\n  }\n\n  _finishLoad() {}\n\n  abstract load(\n    db: DBStore,\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    progressUpdateCallback?: any,\n    totalLength?: number,\n  ): Promise<CollMetadata | undefined>;\n}\n\nexport { BaseParser };\n"]}