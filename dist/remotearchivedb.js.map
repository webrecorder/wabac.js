{"version":3,"file":"remotearchivedb.js","sourceRoot":"","sources":["../src/remotearchivedb.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArchiveDB, type ADBOpts } from \"./archivedb\";\nimport { SingleRecordWARCLoader } from \"./warcloader\";\nimport {\n  BaseAsyncIterReader,\n  AsyncIterReader,\n  LimitReader,\n  concatChunks,\n} from \"warcio\";\n\nimport { type BaseLoader, createLoader } from \"./blockloaders\";\nimport {\n  type Source,\n  type ResourceEntry,\n  type RemoteResourceEntry,\n} from \"./types\";\nimport { type GetHash } from \"./wacz/ziprangereader\";\n\nconst MAX_CACHE_SIZE = 25_000_000;\n\nexport type LoadRecordFromSourceType = Promise<{\n  remote: ResourceEntry | null;\n  hasher?: GetHash | null;\n}>;\n\nexport type Opts = ADBOpts & {\n  depth?: number;\n};\n\n// ===========================================================================\nexport abstract class OnDemandPayloadArchiveDB extends ArchiveDB {\n  noCache: boolean;\n  streamMap: Map<string, ChunkStore>;\n\n  constructor(name: string, noCache = false) {\n    super(name);\n    this.noCache = noCache;\n\n    this.useRefCounts = !noCache;\n\n    this.streamMap = new Map<string, ChunkStore>();\n  }\n\n  isSameUrl(remoteUrl: string, cdxUrl: string, method?: string | null) {\n    if (remoteUrl === cdxUrl) {\n      return true;\n    }\n\n    const decodedRemoteUrl = decodeURIComponent(remoteUrl);\n    const decodedCdxUrl = decodeURIComponent(cdxUrl);\n\n    if (decodedRemoteUrl === decodedCdxUrl) {\n      return true;\n    }\n\n    // if non-GET, check if cdxUrl starts with requested url\n    if (method && decodedCdxUrl.startsWith(decodedRemoteUrl)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  abstract loadRecordFromSource(\n    cdx: RemoteResourceEntry,\n  ): LoadRecordFromSourceType;\n\n  override async loadPayload(\n    cdx: ResourceEntry,\n    opts: Opts,\n  ): Promise<BaseAsyncIterReader | Uint8Array | null> {\n    let payload = await super.loadPayload(cdx, opts);\n    if (payload) {\n      if (\n        cdx.respHeaders &&\n        (cdx.mime !== \"warc/revisit\" ||\n          (cdx.status! >= 300 && cdx.status! < 400))\n      ) {\n        return payload;\n      }\n    }\n\n    const chunkstore = this.streamMap.get(cdx.url);\n    if (chunkstore) {\n      console.log(`Reuse stream for ${cdx.url}`);\n      return new PartialStreamReader(chunkstore);\n    }\n\n    const { remote, hasher } = await this.loadRecordFromSource(\n      cdx as RemoteResourceEntry,\n    );\n\n    if (!remote) {\n      console.log(`No WARC Record Loaded for: ${cdx.url}`);\n      return null;\n    }\n\n    if (!this.isSameUrl(remote.url, cdx.url, cdx.method)) {\n      console.log(`Wrong url: expected ${cdx.url}, got ${remote.url}`);\n      return null;\n    }\n\n    if (remote.ts !== cdx.ts) {\n      const rounded = Math.floor(remote.ts / 1000) * 1000;\n      if (rounded !== cdx.ts) {\n        console.log(`Wrong timestamp: expected ${cdx.ts}, got ${remote.ts}`);\n        return null;\n      }\n    }\n\n    if (remote.digest !== cdx.digest && cdx.digest && remote.digest) {\n      const remoteDigestParts = remote.digest.split(\":\");\n      const cdxDigestParts = cdx.digest.split(\":\");\n      if (\n        remoteDigestParts.length === 2 &&\n        cdxDigestParts.length === 2 &&\n        cdxDigestParts[1] === remoteDigestParts[1]\n      ) {\n        cdx.digest = remoteDigestParts[0] + \":\" + cdxDigestParts[1];\n      } else {\n        console.log(\n          `Wrong digest: expected ${cdx.digest}, got ${remote.digest}`,\n        );\n      }\n      //return null;\n    }\n\n    // Revisit\n    if (remote.origURL) {\n      // optimize: if revisit of redirect, just set the respHeaders and return empty payload\n      if (\n        !payload &&\n        cdx.status! >= 300 &&\n        cdx.status! < 400 &&\n        remote.respHeaders\n      ) {\n        cdx.respHeaders = remote.respHeaders;\n        if (!this.noCache) {\n          try {\n            await this.db!.put(\"resources\", cdx);\n          } catch (e) {\n            console.log(e);\n          }\n        }\n        return new Uint8Array([]);\n      }\n\n      const origResult = await this.lookupUrl(\n        remote.origURL,\n        remote.origTS || 0,\n        { ...opts, noRevisits: true },\n      );\n      if (!origResult) {\n        return null;\n      }\n\n      const depth = opts.depth || 0;\n\n      if (!payload) {\n        if (depth < 2) {\n          payload = await this.loadPayload(origResult, {\n            ...opts,\n            depth: depth + 1,\n          });\n        } else {\n          console.warn(\n            \"Avoiding revisit lookup loop for: \" + JSON.stringify(remote),\n          );\n        }\n        if (!payload) {\n          return null;\n        }\n      }\n\n      // if revisit record has header, use those, otherwise use headers from original\n      if (remote.respHeaders && origResult.respHeaders) {\n        cdx.respHeaders = remote.respHeaders;\n        if (origResult.respHeaders[\"content-length\"]) {\n          // ensure content-length is the original result content length always\n          cdx.respHeaders[\"content-length\"] =\n            origResult.respHeaders[\"content-length\"];\n        }\n      } else {\n        cdx.respHeaders = origResult.respHeaders;\n      }\n\n      cdx.mime = origResult.mime;\n      // ensure digest is set to original (usually same but may have different prefix)\n      // to ensure proper lookup from cache\n      cdx.digest = origResult.digest;\n\n      if (origResult.extraOpts) {\n        cdx.extraOpts = origResult.extraOpts;\n      }\n\n      // update revisit data if cacheing\n      if (!this.noCache) {\n        // don't store in resources db\n        delete cdx.payload;\n\n        try {\n          await this.db!.put(\"resources\", cdx);\n        } catch (e) {\n          console.log(e);\n        }\n\n        // cache here only if somehow the digests don't match (wrong digest from previous versions?)\n        if (\n          origResult.digest !== remote.digest &&\n          remote.digest &&\n          payload instanceof Uint8Array\n        ) {\n          await this.commitPayload(payload, remote.digest);\n        }\n      }\n\n      return payload;\n    }\n\n    const digest = remote.digest;\n\n    const tooBigForCache = cdx.source![\"length\"] >= MAX_CACHE_SIZE;\n\n    if (!this.noCache && !tooBigForCache && remote.reader && digest) {\n      remote.reader = new PayloadBufferingReader(\n        this,\n        remote.reader as LimitReader,\n        digest,\n        cdx.url,\n        this.streamMap,\n        hasher || null,\n        cdx.recordDigest!,\n        cdx.source,\n      );\n    }\n\n    if (tooBigForCache) {\n      console.log(\"Not cacheing, too big: \" + cdx.url);\n    }\n\n    payload = remote.payload || null;\n\n    if (!payload && !remote.reader) {\n      return null;\n    }\n\n    // Update payload if cacheing\n    try {\n      if (payload && !this.noCache && !tooBigForCache && digest) {\n        await this.commitPayload(payload, digest);\n      }\n    } catch (e) {\n      console.warn(`Payload Update Error: ${cdx.url}`);\n      console.warn(e);\n    }\n\n    // Update resources if headers or digest missing\n    if (!cdx.respHeaders || !cdx.digest) {\n      cdx.respHeaders = remote.respHeaders;\n      cdx.digest = digest;\n      if (remote.extraOpts) {\n        cdx.extraOpts = remote.extraOpts;\n      }\n\n      if (!this.noCache && !tooBigForCache) {\n        try {\n          await this.db!.put(\"resources\", cdx);\n        } catch (e) {\n          console.warn(`Resource Update Error: ${cdx.url}`);\n          console.warn(e);\n        }\n      }\n    }\n\n    return payload ? payload : remote.reader || null;\n  }\n\n  async commitPayload(payload: Uint8Array | null | undefined, digest: string) {\n    if (!payload || payload.length === 0) {\n      return;\n    }\n\n    const tx = this.db!.transaction([\"payload\", \"digestRef\"], \"readwrite\");\n\n    try {\n      //const payloadEntry = await tx.objectStore(\"payload\").get(digest);\n      //payloadEntry.payload = payload;\n      void tx.objectStore(\"payload\").put({ payload, digest });\n\n      if (this.useRefCounts) {\n        const ref = await tx.objectStore(\"digestRef\").get(digest);\n        if (ref) {\n          ref.size = payload.length;\n          void tx.objectStore(\"digestRef\").put(ref);\n        }\n      }\n\n      await tx.done;\n    } catch (e) {\n      console.warn(\"Payload Commit Error: \" + e);\n    }\n  }\n}\n\n// ===========================================================================\nexport abstract class SimpleRemoteArchiveDB extends OnDemandPayloadArchiveDB {\n  abstract loadSource(source: Source): Promise<ReadableStream<Uint8Array>>;\n\n  override async loadRecordFromSource(\n    cdx: RemoteResourceEntry,\n  ): LoadRecordFromSourceType {\n    const responseStream = await this.loadSource(cdx.source);\n\n    const loader = new SingleRecordWARCLoader(responseStream);\n\n    const remote = await loader.load();\n    return { remote };\n  }\n}\n\n// ===========================================================================\nexport class RemoteSourceArchiveDB extends SimpleRemoteArchiveDB {\n  loader: BaseLoader;\n\n  constructor(name: string, loader: BaseLoader, noCache = false) {\n    super(name, noCache);\n\n    this.loader = loader;\n  }\n\n  updateHeaders(headers: Record<string, string>) {\n    this.loader.headers = headers;\n  }\n\n  override async loadSource(\n    source: Source,\n  ): Promise<ReadableStream<Uint8Array>> {\n    const { start, length } = source;\n\n    return (await this.loader.getRange(\n      start,\n      length,\n      true,\n    )) as ReadableStream<Uint8Array>;\n  }\n}\n\n// ===========================================================================\nexport class RemotePrefixArchiveDB extends SimpleRemoteArchiveDB {\n  remoteUrlPrefix: string;\n  headers: Record<string, string>;\n\n  constructor(\n    name: string,\n    remoteUrlPrefix: string,\n    headers: Record<string, string>,\n    noCache = false,\n  ) {\n    super(name, noCache);\n\n    this.remoteUrlPrefix = remoteUrlPrefix;\n    this.headers = headers;\n  }\n\n  updateHeaders(headers: Record<string, string>) {\n    this.headers = headers;\n  }\n\n  override async loadSource(\n    source: Source,\n  ): Promise<ReadableStream<Uint8Array>> {\n    const { start, length } = source;\n\n    const headers = new Headers(this.headers);\n    const url = new URL(source.path, this.remoteUrlPrefix).href;\n\n    const loader = await createLoader({ url, headers });\n\n    return (await loader.getRange(\n      start,\n      length,\n      true,\n    )) as ReadableStream<Uint8Array>;\n  }\n}\n\n// ===========================================================================\nclass PartialStreamReader extends BaseAsyncIterReader {\n  chunkstore: ChunkStore;\n  offset: number;\n  size: number;\n\n  constructor(chunkstore: ChunkStore) {\n    super();\n    this.chunkstore = chunkstore;\n    this.offset = 0;\n    this.size = this.chunkstore.totalLength;\n  }\n\n  setLimitSkip(limit = -1, skip = 0) {\n    this.offset = skip;\n    if (limit > 0) {\n      this.size = limit;\n    }\n  }\n\n  setRangeAll(length: number) {\n    this.size = length;\n  }\n\n  async *[Symbol.asyncIterator]() {\n    yield* this.chunkstore.getChunkIter();\n  }\n\n  override getReadableStream() {\n    console.log(`Offset: ${this.offset}, Size: ${this.size}`);\n\n    const reader: AsyncGenerator<Uint8Array> = this.chunkstore.getChunkIter();\n\n    //todo: fix this type conversion\n    const limitreader = new LimitReader(\n      reader as unknown as AsyncIterReader,\n      this.size,\n      this.offset,\n    );\n    return limitreader.getReadableStream();\n  }\n\n  async readlineRaw(\n    _maxLength?: number | undefined,\n  ): Promise<Uint8Array | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n\n// ===========================================================================\nclass ChunkStore {\n  chunks: Uint8Array[];\n  size = 0;\n  done = false;\n  totalLength: number;\n\n  nextChunk: Promise<boolean>;\n  _nextResolve: (x: boolean) => void = () => {};\n\n  constructor(totalLength: number) {\n    this.chunks = [];\n    this.size = 0;\n    this.done = false;\n    this.totalLength = totalLength;\n\n    this.nextChunk = new Promise((resolve) => (this._nextResolve = resolve));\n  }\n\n  add(chunk: Uint8Array): void {\n    this.chunks.push(chunk);\n    this.size += chunk.byteLength;\n    this._nextResolve(true);\n    this.nextChunk = new Promise((resolve) => (this._nextResolve = resolve));\n  }\n\n  concatChunks(): Uint8Array {\n    this._nextResolve(false);\n    this.done = true;\n\n    return concatChunks(this.chunks, this.size);\n  }\n\n  async *getChunkIter(): AsyncGenerator<Uint8Array> {\n    for (const chunk of this.chunks) {\n      yield chunk;\n    }\n\n    let i = this.chunks.length;\n\n    while (!this.done) {\n      if (!(await this.nextChunk)) {\n        break;\n      }\n\n      for (i; i < this.chunks.length; i++) {\n        yield this.chunks[i]!;\n      }\n    }\n  }\n}\n\n// ===========================================================================\nclass PayloadBufferingReader extends BaseAsyncIterReader {\n  db: OnDemandPayloadArchiveDB;\n  reader: LimitReader;\n\n  digest: string;\n  url: string;\n\n  commit = true;\n  fullbuff: Uint8Array | null = null;\n  hasher: GetHash | null;\n  expectedHash: string;\n  source: Source | undefined;\n\n  isRange = false;\n  totalLength = -1;\n  fixedSize = 0;\n\n  streamMap: Map<string, ChunkStore>;\n\n  constructor(\n    db: OnDemandPayloadArchiveDB,\n    reader: LimitReader,\n    digest: string,\n    url = \"\",\n    streamMap: Map<string, ChunkStore>,\n    hasher: GetHash | null,\n    expectedHash: string,\n    source: Source | undefined,\n  ) {\n    super();\n    this.db = db;\n    this.reader = reader;\n\n    this.digest = digest;\n    this.url = url;\n\n    this.commit = true;\n    this.fullbuff = null;\n\n    this.hasher = hasher;\n    this.expectedHash = expectedHash;\n    this.source = source;\n\n    this.isRange = false;\n    this.totalLength = -1;\n\n    this.streamMap = streamMap;\n  }\n\n  setRangeAll(length: number) {\n    this.isRange = true;\n    this.totalLength = length;\n  }\n\n  setLimitSkip(limit = -1, skip = 0) {\n    this.isRange = true;\n\n    if (limit === 2 && skip === 0) {\n      this.fixedSize = 2;\n      return;\n    }\n\n    if (limit != -1 || skip > 0) {\n      this.commit = false;\n    }\n    this.reader.setLimitSkip(limit, skip);\n  }\n\n  async *[Symbol.asyncIterator]() {\n    let chunkstore: ChunkStore | null = null;\n\n    if (this.commit) {\n      chunkstore = new ChunkStore(this.totalLength);\n\n      if (this.isRange) {\n        console.log(`Store stream for ${this.url}, ${this.totalLength}`);\n        this.streamMap.set(this.url, chunkstore);\n      }\n    }\n\n    for await (const chunk of this.reader) {\n      if (chunkstore) {\n        chunkstore.add(chunk);\n      }\n\n      yield chunk;\n    }\n\n    if (this.reader.limit !== 0) {\n      console.warn(\n        `Expected payload not consumed, ${this.reader.limit} bytes left`,\n      );\n    } else {\n      if (!this.isRange && this.hasher && this.expectedHash && this.source) {\n        const hash = this.hasher.getHash();\n        const { path, start, length } = this.source;\n        const id = `${path}:${start}-${length}`;\n        void this.db.addVerifyData(id, this.expectedHash, hash);\n      }\n\n      if (this.commit) {\n        this.fullbuff = chunkstore!.concatChunks();\n        await this.db.commitPayload(this.fullbuff, this.digest);\n      }\n    }\n\n    if (this.commit && this.isRange) {\n      this.streamMap.delete(this.url);\n      console.log(`Delete stream for ${this.url}`);\n    }\n  }\n\n  async _consumeIter(iter: AsyncIterable<unknown>) {\n    for await (const _chunk of iter);\n  }\n\n  override async readFully() {\n    if (!this.fullbuff) {\n      // should not set if already false\n      //this.commit = true;\n      await this._consumeIter(this);\n    }\n    return this.fullbuff!;\n  }\n\n  override getReadableStream() {\n    const stream = super.getReadableStream();\n\n    if (!this.commit) {\n      return stream;\n    }\n\n    // if committing, need to consume entire stream, so tee reader and consume async\n    const tees = stream.tee();\n\n    void this._consumeIter(AsyncIterReader.fromReadable(tees[1].getReader()));\n\n    // load a single, fixed chunk (only used for 0-1 safari range)\n    if (this.fixedSize) {\n      return this.getFixedSizeReader(tees[0].getReader(), this.fixedSize);\n    } else {\n      return tees[0];\n    }\n  }\n\n  getFixedSizeReader(reader: ReadableStreamDefaultReader, size: number) {\n    return new ReadableStream({\n      async start(controller) {\n        const { value, done } = await reader.read();\n        if (!done) {\n          controller.enqueue(value.slice(0, size));\n        }\n        controller.close();\n        //(reader as any).close();\n      },\n    });\n  }\n\n  async readlineRaw(\n    _maxLength?: number | undefined,\n  ): Promise<Uint8Array | null> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"]}