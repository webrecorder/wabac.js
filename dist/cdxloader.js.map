{"version":3,"file":"cdxloader.js","sourceRoot":"","sources":["../src/cdxloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { type ResourceEntry } from \"./types\";\nimport { tsToDate } from \"./utils\";\nimport { WARCLoader } from \"./warcloader\";\n\nimport {\n  CDXIndexer,\n  AsyncIterReader,\n  appendRequestQuery,\n  type WARCRecord,\n  type WARCParser,\n  type Source,\n} from \"warcio\";\n\nexport const CDX_COOKIE = \"req.http:cookie\";\n\ntype WARCRecordWithPage = WARCRecord & {\n  _isPage: boolean;\n};\n\n// ===========================================================================\nclass CDXFromWARCLoader extends WARCLoader {\n  cdxindexer: CDXIndexer | null = null;\n  // @ts-expect-error [TODO] - TS4114 - This member must have an 'override' modifier because it overrides a member in the base class 'WARCLoader'.\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sourceExtra: any;\n  shaPrefix: string;\n\n  constructor(\n    reader: Source,\n    abort: AbortController | null,\n    id: string,\n    sourceExtra = {},\n    shaPrefix = \"sha256:\",\n  ) {\n    super(reader, abort, id);\n    this.sourceExtra = sourceExtra;\n    this.shaPrefix = shaPrefix;\n  }\n\n  // @ts-expect-error [TODO] - TS4114 - This member must have an 'override' modifier because it overrides a member in the base class 'WARCLoader'.\n  filterRecord(record: WARCRecordWithPage) {\n    switch (record.warcType) {\n      case \"warcinfo\":\n      case \"revisit\":\n      case \"request\":\n        return null;\n\n      case \"metadata\":\n        return this.shouldIndexMetadataRecord(record) ? null : \"skip\";\n    }\n\n    const url = record.warcTargetURI;\n    const ts = record.warcDate\n      ? new Date(record.warcDate).getTime()\n      : Date.now();\n\n    if (this.pageMap[ts + \"/\" + url]) {\n      record._isPage = true;\n      return null;\n    }\n\n    return null;\n  }\n\n  // @ts-expect-error [TODO] - TS4114 - This member must have an 'override' modifier because it overrides a member in the base class 'WARCLoader'.\n  index(record: WARCRecord, parser: WARCParser) {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (record) {\n      record._offset = parser.offset;\n      record._length = parser.recordLength;\n    }\n    return super.index(record, parser);\n  }\n\n  // @ts-expect-error [TODO] - TS4114 - This member must have an 'override' modifier because it overrides a member in the base class 'WARCLoader'.\n  indexReqResponse(\n    record: WARCRecordWithPage,\n    reqRecord: WARCRecord,\n    parser: WARCParser,\n  ) {\n    if (record._isPage) {\n      return super.indexReqResponse(record, reqRecord, parser);\n    }\n\n    if (record.warcType === \"warcinfo\") {\n      this.parseWarcInfo(record);\n      return;\n    }\n\n    if (!this.cdxindexer) {\n      this.cdxindexer = new CDXIndexer({ noSurt: true });\n    }\n\n    const cdx = this.cdxindexer.indexRecordPair(record, reqRecord, parser, \"\");\n\n    if (!cdx) {\n      return;\n    }\n\n    if (cdx[\"status\"] === 206) {\n      const headers = record.httpHeaders?.headers;\n      if (headers && !this.isFullRangeRequest(headers)) {\n        return;\n      }\n    }\n\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/prefer-optional-chain\n    if (reqRecord && reqRecord.httpHeaders) {\n      const cookie = reqRecord.httpHeaders.headers.get(\"cookie\");\n      if (cookie) {\n        cdx[CDX_COOKIE] = cookie;\n      }\n    }\n\n    this.addCdx(cdx);\n  }\n\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getSource(cdx: Record<string, any>) {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return {\n      ...this.sourceExtra,\n      // @ts-expect-error [TODO] - TS4111 - Property 'filename' comes from an index signature, so it must be accessed with ['filename'].\n      path: cdx.filename,\n      // @ts-expect-error [TODO] - TS4111 - Property 'offset' comes from an index signature, so it must be accessed with ['offset'].\n      start: Number(cdx.offset),\n      // @ts-expect-error [TODO] - TS4111 - Property 'length' comes from an index signature, so it must be accessed with ['length'].\n      length: Number(cdx.length),\n    };\n  }\n\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  addCdx(cdx: Record<string, any>) {\n    const { url, mime } = cdx;\n\n    // @ts-expect-error [TODO] - TS4111 - Property 'status' comes from an index signature, so it must be accessed with ['status'].\n    const status = Number(cdx.status) || 200;\n\n    // @ts-expect-error [TODO] - TS4111 - Property 'timestamp' comes from an index signature, so it must be accessed with ['timestamp'].\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const date = tsToDate(cdx.timestamp);\n    const ts = date.getTime();\n\n    //if (this.detectPages && isPage(url, status, mime)) {\n    //  const title = url;\n    //  promises.push(this.db.addPage({url, date: date.toISOString(), title}));\n    //}\n\n    const source = this.getSource(cdx);\n\n    // [TODO]\n    // eslint-disable-next-line prefer-const\n    let { digest, recordDigest } = cdx;\n    if (digest && digest.indexOf(\":\") === -1) {\n      digest = this.shaPrefix + digest;\n    }\n\n    const entry: ResourceEntry = {\n      url,\n      ts,\n      status,\n      digest,\n      recordDigest,\n      mime,\n      loaded: false,\n      source,\n    };\n\n    // @ts-expect-error [TODO] - TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method'].\n    if (cdx.method) {\n      // @ts-expect-error [TODO] - TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method']. | TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method'].\n      if (cdx.method === \"HEAD\" || cdx.method === \"OPTIONS\") {\n        return;\n      }\n      // @ts-expect-error [TODO] - TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method'].\n      entry.method = cdx.method;\n    }\n\n    if (cdx[CDX_COOKIE]) {\n      entry[CDX_COOKIE] = cdx[CDX_COOKIE];\n    }\n\n    // url with post query appended\n    // @ts-expect-error [TODO] - TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method']. | TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method'].\n    if (cdx.method && cdx.method !== \"GET\") {\n      entry.url = appendRequestQuery(\n        // @ts-expect-error [TODO] - TS4111 - Property 'url' comes from an index signature, so it must be accessed with ['url'].\n        // [TODO]\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        cdx.url,\n        // @ts-expect-error [TODO] - TS4111 - Property 'requestBody' comes from an index signature, so it must be accessed with ['requestBody'].\n        // [TODO]\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        cdx.requestBody || \"\",\n        // @ts-expect-error [TODO] - TS4111 - Property 'method' comes from an index signature, so it must be accessed with ['method'].\n        // [TODO]\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        cdx.method,\n      );\n    }\n\n    this.addResource(entry);\n  }\n}\n\n// ===========================================================================\nclass CDXLoader extends CDXFromWARCLoader {\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override async load(db: any, progressUpdate?: any, totalSize?: number) {\n    this.db = db;\n\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let reader = this.reader as any;\n\n    if (!reader.iterLines) {\n      reader = new AsyncIterReader(this.reader);\n    }\n\n    let numRead = 0;\n\n    for await (const origLine of reader.iterLines()) {\n      let cdx;\n      let urlkey;\n      let timestamp;\n      numRead += origLine.length;\n      let line = origLine.trimEnd();\n\n      if (!line.startsWith(\"{\")) {\n        const inx = line.indexOf(\" {\");\n        if (inx < 0) {\n          continue;\n        }\n        [urlkey, timestamp] = line.split(\" \", 2);\n        line = line.slice(inx);\n      }\n\n      try {\n        // [TODO]\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        cdx = JSON.parse(line);\n        // [TODO]\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      } catch (e) {\n        console.log(\"JSON Parser error on: \" + line);\n        continue;\n      }\n\n      cdx.timestamp = timestamp;\n      if (!cdx.url) {\n        cdx.url = urlkey;\n        console.warn(`URL missing, using urlkey ${urlkey}`);\n      }\n      if (progressUpdate && totalSize && this.isBatchFull()) {\n        progressUpdate(\n          Math.round((numRead / totalSize) * 100),\n          null,\n          numRead,\n          totalSize,\n        );\n      }\n      // [TODO]\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      this.addCdx(cdx);\n    }\n\n    await this.finishIndexing();\n\n    if (progressUpdate) {\n      progressUpdate(100, null, totalSize, totalSize);\n    }\n\n    return {};\n  }\n}\n\nexport { CDXLoader, CDXFromWARCLoader };\n"]}