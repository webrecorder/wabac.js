{"version":3,"file":"harloader.js","sourceRoot":"","sources":["../src/harloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseParser } from \"./baseparser\";\nimport { type CollMetadata } from \"./types\";\n\n// [TODO]\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype HAR = Record<string, any>;\n\n// ===========================================================================\nclass HARLoader extends BaseParser {\n  har: HAR;\n  pageRefs: Record<string, string>;\n\n  constructor(string_or_har: string | HAR) {\n    super();\n    this.har =\n      typeof string_or_har === \"string\"\n        ? JSON.parse(string_or_har)\n        : string_or_har;\n    this.pageRefs = {};\n  }\n\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async load(db: any): Promise<CollMetadata | undefined> {\n    this.db = db;\n\n    this.parseEntries(this.har);\n\n    this.parsePages(this.har);\n\n    await this.finishIndexing();\n\n    return undefined;\n  }\n\n  parsePages(har: HAR) {\n    // @ts-expect-error [TODO] - TS4111 - Property 'log' comes from an index signature, so it must be accessed with ['log'].\n    for (const page of har.log.pages) {\n      if (!page.pageTimings?.onLoad) {\n        continue;\n      }\n\n      let url;\n      if (\n        page.title &&\n        (page.title.startsWith(\"http:\") || page.title.startsWith(\"https:\"))\n      ) {\n        url = page.title;\n      } else {\n        url = this.pageRefs[page.id];\n      }\n\n      const title = page.title || url;\n\n      const date = page.startedDateTime;\n\n      //this.pageList.push({ \"timestamp\": getTS(page.startedDateTime), \"title\": title, \"url\": url });\n      this.addPage({ url, date, title });\n    }\n  }\n\n  parseEntries(har: HAR) {\n    // @ts-expect-error [TODO] - TS4111 - Property 'log' comes from an index signature, so it must be accessed with ['log'].\n    for (const entry of har.log.entries) {\n      // [TODO]\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      const ts = new Date(entry.startedDateTime).getTime();\n\n      const respHeaders: Record<string, string> = {};\n\n      for (const { name, value } of entry.response.headers) {\n        respHeaders[name] = value;\n      }\n\n      let payload: Uint8Array | null = null;\n\n      const encoder = new TextEncoder();\n\n      if (entry.response.content?.text) {\n        try {\n          // [TODO]\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          payload = Uint8Array.from(atob(entry.response.content.text), (c) =>\n            c.charCodeAt(0),\n          );\n          // [TODO]\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (e) {\n          payload = entry.response.content.text;\n        }\n      } else {\n        const cl = respHeaders[\"Content-Length\"];\n        if (cl && cl !== \"0\") {\n          console.log(\n            `Warning: Content-Length ${cl} but no content found for ${entry.request.url}`,\n          );\n          payload = encoder.encode(\n            \"Sorry, the HAR file did not include the content for this resource.\",\n          );\n        } else {\n          payload = Uint8Array.from([]);\n        }\n      }\n\n      this.addResource({\n        url: entry.request.url,\n        ts,\n        status: entry.response.status,\n        //statusText: entry.response.statusText,\n        respHeaders,\n        //reqHeaders,\n        payload,\n      });\n\n      if (entry.pageref && !this.pageRefs[entry.pageref]) {\n        this.pageRefs[entry.pageref] = entry.request.url;\n      }\n    }\n  }\n}\n\nexport { HARLoader };\n"]}