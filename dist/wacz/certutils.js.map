{"version":3,"file":"certutils.js","sourceRoot":"","sources":["../../src/wacz/certutils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  toByteArray as decodeBase64,\n  fromByteArray as encodeBase64,\n} from \"base64-js\";\nimport { base16 } from \"../utils\";\n\nimport * as x509 from \"@peculiar/x509\";\n// import { AsnParser } from \"@peculiar/asn1-schema\";\n// import { ECDSASigValue } from \"@peculiar/asn1-ecc\";\n//import { ASN1 } from \"asn1-parser\";\n\n//import { concatChunks } from \"warcio\";\n\nconst SPLIT_PEM = /-{5}(BEGIN|END) .*-{5}/gm;\n\ntype VerifySigData = {\n  hash: string;\n  signature: string;\n  publicKey: string;\n  domain: string;\n  domainCert: string;\n  created: string;\n  software: string;\n};\n\ntype VerifyResult = {\n  id: string;\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  expected: any;\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-redundant-type-constituents\n  matched: any | null;\n};\n\nexport async function verifyWACZSignature({\n  hash,\n  signature,\n  publicKey,\n  domain,\n  domainCert,\n  created,\n  software,\n}: VerifySigData) {\n  let domainActual;\n  const results: VerifyResult[] = [];\n\n  const signatureBuff = decodeBase64(signature);\n\n  let publicKeyCrypto: CryptoKey;\n\n  if (domainCert && domain && !publicKey) {\n    const certs = domainCert.split(\"\\n\\n\");\n\n    const certBuffer = decodeBase64(\n      // @ts-expect-error [TODO] - TS2532 - Object is possibly 'undefined'.\n      certs[0].replace(SPLIT_PEM, \"\").replace(/\\s/gm, \"\"),\n    );\n\n    const fingerprint = base16(\n      await crypto.subtle.digest(\"SHA-256\", certBuffer),\n    );\n    results.push({\n      id: \"certFingerprint\",\n      expected: fingerprint,\n      matched: null,\n    });\n\n    const cert = new x509.X509Certificate(certBuffer);\n\n    publicKeyCrypto = await cert.publicKey.export();\n\n    const publicKeyEncoded = encodeBase64(\n      new Uint8Array(cert.publicKey.rawData),\n    );\n    results.push({\n      id: \"publicKey\",\n      expected: publicKeyEncoded,\n      matched: null,\n    });\n\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (cert.subject && cert.subject.startsWith(\"CN=\")) {\n      domainActual = cert.subject.substring(3);\n    }\n\n    //signature = parseASN1Signature(signature);\n  } else {\n    const ecdsaImportParams = {\n      name: \"ECDSA\",\n      namedCurve: \"P-384\",\n    };\n\n    results.push({ id: \"publicKey\", expected: publicKey, matched: null });\n\n    publicKeyCrypto = await crypto.subtle.importKey(\n      \"spki\",\n      decodeBase64(publicKey),\n      ecdsaImportParams,\n      true,\n      [\"verify\"],\n    );\n  }\n\n  const ecdsaSignParams = {\n    name: \"ECDSA\",\n    hash: \"SHA-256\",\n  };\n\n  const encoder = new TextEncoder();\n\n  const sigValid = await crypto.subtle.verify(\n    ecdsaSignParams,\n    publicKeyCrypto,\n    signatureBuff,\n    encoder.encode(hash),\n  );\n\n  results.push({ id: \"signature\", expected: true, matched: sigValid });\n\n  if (created) {\n    results.push({ id: \"created\", expected: created, matched: null });\n  }\n\n  if (software) {\n    results.push({ id: \"software\", expected: software, matched: null });\n  }\n\n  if (domain) {\n    results.push({ id: \"domain\", expected: domain, matched: domainActual });\n  }\n\n  return results;\n}\n\n// function parseASN1Signature(signature: Uint8Array) {\n//   // extract r|s values from asn1\n//   try {\n//     const sig = AsnParser.parse(signature, ECDSASigValue);\n\n//     const sigR = sig.r as Uint8Array;\n//     const sigS = sig.s as Uint8Array;\n\n//     const r = sigR[0] === 0 ? sigR.slice(1) : sigR;\n//     const s = sigS[0] === 0 ? sigS.slice(1) : sigS;\n//     signature = concatChunks([r, s], r.length + s.length);\n//   } catch (se) {\n//     console.log(se);\n//   }\n\n//   return signature;\n// }\n\n// function parseSignature2(signature) {\n//   // extract r|s values from asn1\n//     try {\n//       signature = decodeBase64(signature);\n\n//       const result = ASN1.parse(signature);\n//\n//       if (result && result.children && result.children.length == 2) {\n//         const r = result.children[0].value;\n//         const s = result.children[1].value;\n//\n//         signature = concatChunks([r, s], r.length + s.length);\n//       }\n//\n//     } catch (se) {\n//       console.log(se);\n//     }\n//\n//     return signature;\n//   }\n"]}