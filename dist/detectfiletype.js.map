{"version":3,"file":"detectfiletype.js","sourceRoot":"","sources":["../src/detectfiletype.ts"],"names":[],"mappings":"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","sourcesContent":["// https://en.wikipedia.org/wiki/List_of_file_signatures\nconst zipMagicBytes = [0x50, 0x4b, 0x03, 0x04];\nconst isZipFile = hasMagicBytes(zipMagicBytes);\n\nconst gzMagicBytes = [0x1f, 0x8b, 0x08];\nconst isGzFile = hasMagicBytes(gzMagicBytes);\n\n// starts with \"WARC\"\"\nconst warcMagicBytes = [0x57, 0x41, 0x52, 0x43];\nconst isWarcFile = hasMagicBytes(warcMagicBytes);\n\nconst PEEK_BYTES = 4;\n\n// todo: improve this to do full detection of different text types\n// @ts-expect-error [TODO] - TS7030 - Not all code paths return a value.\nfunction detectTextType(bytes: Uint8Array) {\n  try {\n    const text = new TextDecoder().decode(bytes);\n    const lines = text.split(\"\\n\");\n\n    if (lines.length > 1 && lines.indexOf(\" {\") >= 0) {\n      return \".cdxj\";\n    }\n  } catch (_e) {\n    return \"\";\n  }\n}\n\nfunction hasMagicBytes(magicBytes: number[]) {\n  return (fileBytes: Uint8Array) => {\n    for (const [index, value] of magicBytes.entries()) {\n      if (value !== fileBytes[index]) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\nexport function getKnownFileExtension(name: string) {\n  const fileExtensions = [\n    \".warc\",\n    \".warc.gz\",\n    \".cdx\",\n    \".cdxj\",\n    \".har\",\n    \".json\",\n    \".wacz\",\n  ];\n  for (const ext of fileExtensions) {\n    if (name.endsWith(ext)) {\n      return ext;\n    }\n  }\n  if (name.endsWith(\".wacz.zip\")) {\n    return \".wacz\";\n  }\n  return undefined;\n}\n\n// @ts-expect-error [TODO] - TS7030 - Not all code paths return a value.\nexport function checkMagicBytes(fileBytes: Uint8Array) {\n  // todo: add additional detection for WACZ besides just zip\n  if (isZipFile(fileBytes)) {\n    return \".wacz\";\n  }\n\n  if (isWarcFile(fileBytes)) {\n    return \".warc\";\n  }\n\n  if (isGzFile(fileBytes)) {\n    return \".warc.gz\";\n  }\n}\n\nexport async function detectFileType(response: Response) {\n  const reader = response.body!.getReader();\n  let fileType: string | undefined = \"\";\n  const { value, done } = await reader.read();\n  if (!done && value.length >= PEEK_BYTES) {\n    fileType = checkMagicBytes(value.slice(0, PEEK_BYTES));\n    if (!fileType) {\n      fileType = detectTextType(value);\n    }\n  }\n  if (!done) {\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    reader.cancel();\n  }\n  return fileType;\n}\n"]}