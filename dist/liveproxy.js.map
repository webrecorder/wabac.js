{"version":3,"file":"liveproxy.js","sourceRoot":"","sources":["../src/liveproxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { getProxyNotFoundResponse } from \"./notfound\";\nimport { type ArchiveRequest } from \"./request\";\nimport { ArchiveResponse } from \"./response\";\nimport { type ExtraConfig, type DBStore } from \"./types\";\n\ndeclare let self: ServiceWorkerGlobalScope;\n\n// ===========================================================================\nexport class LiveProxy implements DBStore {\n  prefix: string;\n  proxyPathOnly: boolean;\n  isLive: boolean;\n  archivePrefix: string;\n  archiveMod: string;\n  cloneResponse: boolean;\n  allowBody: boolean;\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  hostProxy: Record<string, any>;\n  hostProxyOnly: boolean;\n\n  messageOnProxyErrors: boolean;\n\n  constructor(\n    extraConfig?: ExtraConfig,\n    { cloneResponse = false, allowBody = false, hostProxyOnly = false } = {},\n  ) {\n    extraConfig = extraConfig || {};\n\n    this.prefix = extraConfig.prefix || \"\";\n    this.proxyPathOnly = extraConfig.proxyPathOnly || false;\n    this.isLive = extraConfig.isLive !== undefined ? extraConfig.isLive : true;\n    this.archivePrefix = extraConfig.archivePrefix || \"\";\n    this.archiveMod = extraConfig.archiveMod || \"id_\";\n    this.cloneResponse = cloneResponse;\n    this.allowBody = allowBody || this.isLive || !!extraConfig.noPostToGet;\n\n    // @ts-expect-error [TODO] - TS4111 - Property 'messageOnProxyErrors' comes from an index signature, so it must be accessed with ['messageOnProxyErrors'].\n    this.messageOnProxyErrors = extraConfig.messageOnProxyErrors || false;\n\n    // @ts-expect-error [TODO] - TS4111 - Property 'hostProxy' comes from an index signature, so it must be accessed with ['hostProxy'].\n    this.hostProxy = extraConfig.hostProxy;\n\n    if (this.hostProxy instanceof Array) {\n      // [TODO]\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const byHost: Record<string, any> = {};\n      for (const entry of this.hostProxy) {\n        byHost[entry.host] = entry;\n      }\n      this.hostProxy = byHost;\n    }\n\n    this.hostProxyOnly = hostProxyOnly;\n  }\n\n  async getAllPages() {\n    return [];\n  }\n\n  getFetchUrl(url: string, request: ArchiveRequest, headers: Headers) {\n    let parsedUrl;\n\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (this.hostProxy) {\n      parsedUrl = new URL(url);\n      const hostdata = this.hostProxy[parsedUrl.host];\n      if (hostdata) {\n        // set X-Proxy-Host to matched host\n        headers.set(\"X-Proxy-Host\", parsedUrl.host);\n        // Given https://example.com/path/somefile.html, and prefix \"https://upstream-server/prefix/\"\n        // with pathOnly, send to https://upstream-server/prefix/path/somefile.html\n        // without pathOnly, send to https://upstream-server/prefix/https://example.com/path/somefile.html\n        return (\n          hostdata.prefix +\n          (hostdata.pathOnly ? parsedUrl.pathname + parsedUrl.search : url)\n        );\n      }\n    }\n\n    if (this.hostProxyOnly) {\n      return null;\n    }\n\n    if (this.proxyPathOnly) {\n      if (!parsedUrl) {\n        parsedUrl = new URL(url);\n      }\n      return this.prefix + parsedUrl.pathname + parsedUrl.search;\n    } else if (this.isLive || !request.timestamp) {\n      return this.prefix + url;\n    } else {\n      return (\n        this.prefix +\n        this.archivePrefix +\n        request.timestamp +\n        this.archiveMod +\n        \"/\" +\n        url\n      );\n    }\n  }\n\n  async getResource(request: ArchiveRequest, prefix: string) {\n    const { headers, credentials, url } = request.prepareProxyRequest(\n      prefix,\n      true,\n    );\n\n    const fetchUrl = this.getFetchUrl(url, request, headers);\n\n    if (!fetchUrl) {\n      return null;\n    }\n\n    let body: Uint8Array | null = null;\n\n    const isPOST =\n      request.method === \"POST\" ||\n      request.method === \"PUT\" ||\n      request.method === \"DELETE\";\n\n    if (isPOST) {\n      if (this.allowBody) {\n        body = await request.getBody();\n      } else {\n        void this.sendProxyError(\"post-request-attempt\", url, request.method);\n      }\n    }\n\n    let response = await fetch(fetchUrl, {\n      method: request.method,\n      body,\n      headers,\n      credentials,\n      mode: \"cors\",\n      redirect: \"follow\",\n    });\n\n    let noRW = false;\n\n    if (isPOST && response.status >= 400) {\n      void this.sendProxyError(\n        \"post-request-failed\",\n        url,\n        request.method,\n        response.status,\n      );\n    } else if (response.status === 429) {\n      void this.sendProxyError(\n        \"rate-limited\",\n        url,\n        request.method,\n        response.status,\n      );\n    }\n\n    if (\n      response.status > 400 &&\n      response.status !== 404 &&\n      [\"\", \"document\", \"iframe\"].includes(request.destination)\n    ) {\n      response = getProxyNotFoundResponse(url, response.status);\n      noRW = true;\n    }\n\n    try {\n      // was a redirect, issue a redirect to the exact URL\n      const fullFetchURL = new URL(fetchUrl, self.location.href).href;\n\n      if (response.url !== fullFetchURL) {\n        const inx = response.url.indexOf(\"/http\");\n        const actualUrl = response.url.slice(inx + 1);\n        // ensure actual URL is different, not just timestamp\n        if (url !== actualUrl) {\n          response = Response.redirect(actualUrl);\n        }\n      }\n    } catch (_) {\n      // ignore\n    }\n\n    let clonedResponse: Response | null = null;\n\n    if (this.cloneResponse) {\n      clonedResponse = response.clone();\n    }\n\n    const archiveResponse = ArchiveResponse.fromResponse({\n      url,\n      response,\n      date: new Date(),\n      noRW,\n      isLive: this.isLive,\n      archivePrefix: this.archivePrefix,\n    });\n\n    if (clonedResponse) {\n      archiveResponse.clonedResponse = clonedResponse;\n    }\n\n    return archiveResponse;\n  }\n\n  async sendProxyError(\n    type: string,\n    url: string,\n    method: string,\n    status?: number,\n  ) {\n    if (!this.messageOnProxyErrors) {\n      return;\n    }\n\n    const clients = await self.clients.matchAll({ type: \"window\" });\n    for (const client of clients) {\n      const clientUrl = new URL(client.url);\n      if (clientUrl.searchParams.get(\"source\") === this.prefix) {\n        client.postMessage({ type, url, method, status });\n        break;\n      }\n    }\n  }\n}\n"]}