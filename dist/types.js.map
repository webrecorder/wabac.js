{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { type BaseAsyncIterReader } from \"warcio\";\nimport { type ArchiveRequest } from \"./request\";\nimport { type ArchiveResponse } from \"./response\";\nimport { type BlockLoaderExtra } from \"./blockloaders\";\n\nexport type Source = {\n  start: number;\n  length: number;\n  path: string;\n  wacz?: string;\n};\n\n// known options that can be included in WARC header as WARC-JSON-Metadata: <extraOpts json>\nexport type ExtraOpts = {\n  // Video options\n  maxBitrate?: number;\n  adaptive_max_resolution?: number;\n  maxRes?: number;\n  adaptive_max_bandwidth?: number;\n  maxBand?: number;\n\n  // Pixel Ratio\n  pixelRatio?: number;\n\n  // Local/Session Storage\n  storage?: string;\n\n  // IP Info\n  ipType?: string;\n\n  // Cert Info\n  cert?: {\n    issuer: string;\n    ctc: string;\n  };\n\n  // if content was rewritten\n  rewritten?: number;\n\n  // if disabling media source extensions\n  disableMSE?: number;\n};\n\nexport type ResourceEntry = {\n  url: string;\n  ts: number;\n\n  digest?: string | null;\n  status?: number;\n  mime?: string;\n\n  respHeaders?: Record<string, string> | null;\n  reqHeaders?: Record<string, string> | null;\n  recordDigest?: string | null;\n  payload?: Uint8Array | null;\n  reader?: BaseAsyncIterReader | null;\n  referrer?: string | null;\n  extraOpts?: ExtraOpts | null;\n  pageId?: string | null;\n  origURL?: string | null;\n  origTS?: number | null;\n  source?: Source;\n  requestUrl?: string | null;\n  method?: string | null;\n  requestBody?: Uint8Array;\n  loaded?: boolean;\n  statusText?: string;\n\n  \"req.http:cookie\"?: string;\n};\n\nexport type RemoteResourceEntry = ResourceEntry & {\n  source: Source;\n};\n\nexport type PageEntry = {\n  url: string;\n\n  date?: string | null;\n  datetime?: string | null;\n  ts?: number;\n\n  title?: string;\n  id?: string;\n  state?: number;\n\n  timestamp?: string;\n\n  mime?: string;\n  depth?: number;\n  status?: number;\n  favIconUrl?: string;\n  wacz?: string;\n  waczhash?: string;\n  isSeed?: boolean;\n\n  pos?: number;\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  list?: any;\n};\n\nexport type DigestRefCount = {\n  digest: string;\n  count: number | undefined;\n  size: number;\n};\n\nexport type ResAPIResponse = {\n  url: string;\n  date: string;\n  ts: string;\n  mime: string;\n  status: number;\n};\n\nexport interface DBStore {\n  getResource: (\n    request: ArchiveRequest,\n    prefix: string,\n    event: FetchEvent,\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts?: Record<string, any>,\n  ) => Promise<ArchiveResponse | Response | null>;\n\n  // [TODO]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getAllPages: () => Promise<any[]>;\n}\n\nexport interface ArchiveLoader {\n  load: (\n    db: DBStore,\n    // [TODO]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    progressUpdateCallback?: any,\n    totalLength?: number | undefined,\n  ) => Promise<CollMetadata | undefined>;\n}\n\nexport type CollMetadata = {\n  fullSize?: number;\n  size?: number;\n  mtime?: number;\n  title?: string;\n  desc?: string;\n};\n\nexport type ExtraConfig = {\n  prefix?: string;\n  type?: string;\n  headers?: Record<string, string>;\n\n  injectScripts?: string[];\n  noRewritePrefixes?: string[] | null;\n\n  noPostToGet?: boolean;\n  convertPostToGet?: boolean;\n\n  coHeaders?: boolean;\n  csp?: string;\n\n  injectRelCanon?: boolean;\n\n  baseUrlSourcePrefix?: string;\n  baseUrl?: string;\n  baseUrlHashReplay?: boolean;\n  baseUrlAppendReplay?: boolean;\n\n  liveRedirectOnNotFound?: boolean;\n  adblockUrl?: string;\n\n  proxyTLD?: string;\n  localTLD?: string;\n\n  proxyOrigin?: string;\n  proxyTs?: string;\n  proxyBannerUrl?: string;\n  proxyPathOnly?: boolean;\n  archivePrefix?: string;\n  archiveMod?: string;\n  isLive?: boolean;\n};\n\nexport type CollConfig = {\n  root?: boolean;\n\n  dbname: string;\n\n  ctime?: number;\n\n  decode?: boolean;\n\n  sourceUrl: string;\n\n  extraConfig?: ExtraConfig;\n\n  topTemplateUrl?: string;\n\n  metadata?: CollMetadata;\n\n  loadUrl?: string;\n\n  size?: number;\n\n  headers?: Record<string, string>;\n\n  extra?: BlockLoaderExtra;\n\n  noCache?: boolean;\n\n  remotePrefix?: string;\n\n  sourceName?: string;\n\n  onDemand?: boolean;\n};\n\nexport type PreloadResources = {\n  name: string;\n  crawlId: string;\n};\n\nexport type WACZPageEntry = {\n  id: string;\n  url: string;\n  title?: string;\n  ts: number;\n  mime: string;\n  status: number;\n  depth: number;\n  favIconUrl?: string;\n  filename: string;\n  isSeed: boolean;\n  crawl_id?: string;\n};\n\nexport type MultiWACZJsonSpec = {\n  resources: { name: string; path: string; hash: string; crawlId?: string }[];\n  profile: string;\n  initialPages?: WACZPageEntry[];\n  preloadResources?: PreloadResources[];\n  totalPages?: number;\n  pagesQueryUrl?: string;\n};\n\nexport type WACZCollConfig = CollConfig & {\n  dbname: string;\n  noCache?: boolean;\n  decode?: unknown;\n  loadUrl: string;\n  metadata?: CollMetadata &\n    Partial<MultiWACZJsonSpec> & {\n      textIndex?: string;\n    };\n  extraConfig?: ExtraConfig & {\n    decodeResponses?: unknown;\n    hostProxy?: boolean;\n    fuzzy?: [RegExp | string, string][];\n    textIndex?: string;\n  };\n};\n"]}