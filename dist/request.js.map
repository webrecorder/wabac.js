{"version":3,"file":"request.js","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":"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","sourcesContent":["import { postToGetUrl } from \"warcio\";\n\nconst REPLAY_REGEX =\n  /^(?::([\\w-]+)\\/)?(\\d*)([a-z]+_|[$][a-z0-9:.-]+)?(?:\\/|\\||%7C|%7c)(.+)/;\n\nexport type ArchiveRequestInitOpts = {\n  isRoot?: boolean;\n  mod?: string;\n  ts?: string;\n  proxyOrigin?: string;\n  localOrigin?: string;\n  proxyTLD?: string;\n  localTLD?: string;\n  defaultReplayMode?: boolean;\n};\n\nexport class ArchiveRequest {\n  url = \"\";\n  timestamp = \"\";\n  mod = \"\";\n  pageId = \"\";\n  hash = \"\";\n  cookie = \"\";\n\n  isProxyOrigin = false;\n  proxyOrigin?: string;\n  proxyScheme = \"\";\n  localOrigin?: string;\n  httpToHttpsNeeded = false;\n\n  proxyTLD?: string;\n  localTLD?: string;\n\n  request: Request;\n  method: string;\n  mode: string;\n\n  // eslint-disable-next-line @typescript-eslint/prefer-readonly\n  private _proxyReferrer = \"\";\n\n  _postToGetConverted = false;\n\n  constructor(\n    wbUrlStr: string,\n    request: Request,\n    {\n      isRoot = false,\n      mod = \"\",\n      ts = \"\",\n      proxyOrigin = undefined,\n      localOrigin = undefined,\n      proxyTLD = undefined,\n      localTLD = undefined,\n      defaultReplayMode = false,\n    }: ArchiveRequestInitOpts = {},\n  ) {\n    const wbUrl = REPLAY_REGEX.exec(wbUrlStr);\n\n    this.timestamp = ts;\n    this.mod = mod;\n\n    this.request = request;\n    this.method = request.method;\n    this.mode = request.mode;\n\n    if (\n      !wbUrl &&\n      (wbUrlStr.startsWith(\"https:\") ||\n        wbUrlStr.startsWith(\"http:\") ||\n        wbUrlStr.startsWith(\"blob:\"))\n    ) {\n      this.url = wbUrlStr;\n    } else if (!wbUrl && isRoot) {\n      this.url = \"https://\" + wbUrlStr;\n    } else if (!wbUrl) {\n      this.url = \"\";\n      return;\n    } else {\n      this.pageId = wbUrl[1] || \"\";\n      this.timestamp = wbUrl[2] || \"\";\n      this.mod = wbUrl[3] || \"\";\n      this.url = wbUrl[4] || \"\";\n    }\n\n    if (proxyOrigin && localOrigin && !defaultReplayMode) {\n      this.url = resolveProxyOrigin(proxyOrigin, localOrigin, this.url);\n      if (this.request.referrer) {\n        this._proxyReferrer = resolveProxyOrigin(\n          proxyOrigin,\n          localOrigin,\n          this.request.referrer,\n        );\n      }\n      this.isProxyOrigin = true;\n      this.proxyOrigin = proxyOrigin;\n      this.proxyScheme = proxyOrigin\n        ? new URL(proxyOrigin).protocol.slice(0, -1)\n        : \"\";\n      this.localOrigin = localOrigin;\n      this.httpToHttpsNeeded =\n        this.proxyScheme === \"http\" && localOrigin.startsWith(\"https:\");\n      this.proxyTLD = proxyTLD || \"\";\n      this.localTLD = localTLD || \"\";\n    }\n\n    const hashIndex = this.url.indexOf(\"#\");\n    if (hashIndex > 0) {\n      this.hash = this.url.slice(hashIndex);\n      this.url = this.url.substring(0, hashIndex);\n    }\n  }\n\n  get headers() {\n    return this.request.headers;\n  }\n\n  get destination() {\n    return this.request.destination;\n  }\n\n  get referrer() {\n    return this._proxyReferrer || this.request.referrer;\n  }\n\n  async convertPostToGet() {\n    if (this._postToGetConverted) {\n      return this.url;\n    }\n\n    const request = this.request;\n\n    if (request.method !== \"POST\" && request.method !== \"PUT\") {\n      return this.url;\n    }\n\n    const data = {\n      method: request.method,\n      postData: await request.text(),\n      headers: request.headers,\n      url: this.url,\n    };\n\n    if (postToGetUrl(data)) {\n      this.url = data.url;\n      this.method = \"GET\";\n      this.mode =\n        this.request.mode === \"navigate\" ? \"same-origin\" : this.request.mode;\n      this._postToGetConverted = true;\n    }\n\n    return this.url;\n  }\n\n  prepareProxyRequest(\n    prefix: string,\n    isLive = true,\n  ): {\n    referrer?: string;\n    headers: Headers;\n    credentials: RequestCredentials;\n    url: string;\n  } {\n    let headers;\n    let referrer;\n    let credentials: RequestCredentials;\n\n    if (isLive) {\n      headers = new Headers(this.request.headers);\n      referrer = this.request.referrer;\n      const inx = referrer.indexOf(\"/http\", prefix.length - 1);\n      if (inx > 0) {\n        referrer = referrer.slice(inx + 1);\n        headers.set(\"X-Proxy-Referer\", referrer);\n      }\n      credentials = this.request.credentials;\n      if (this.cookie) {\n        headers.set(\"X-Proxy-Cookie\", this.cookie);\n      }\n    } else {\n      headers = new Headers();\n      credentials = \"omit\";\n    }\n\n    let url = this.url;\n\n    if (url.startsWith(\"//\") && referrer) {\n      try {\n        url = new URL(referrer).protocol + url;\n      } catch (_) {\n        url = \"https:\" + url;\n      }\n    }\n\n    return { referrer, headers, credentials, url };\n  }\n\n  async getBody() {\n    const request = this.request.clone();\n    return new Uint8Array(await request.arrayBuffer());\n  }\n}\n\nfunction resolveProxyOrigin(\n  proxyOrigin: string,\n  localOrigin: string,\n  urlStr: string,\n) {\n  const url = new URL(urlStr);\n  if (url.origin === localOrigin) {\n    return proxyOrigin + url.pathname + (url.search ? url.search : \"\");\n  }\n  return urlStr;\n}\n\nexport function resolveFullUrlFromReferrer(url: string, referrer: string) {\n  const inx = referrer.indexOf(\"/http\");\n  if (inx < 0) {\n    return null;\n  }\n  const origin = new URL(url).origin;\n  const relUrl = url.slice(origin.length);\n  const baseUrl = referrer.slice(inx + 1);\n  const fullUrl = new URL(relUrl, baseUrl);\n  return referrer.slice(0, inx + 1) + fullUrl.href;\n}\n"]}